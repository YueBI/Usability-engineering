Implementing user-oriented interfaces: from user analysis to framework's components
实现面向用户的界面: 从用户分析到框架组件

    通过将任务和用户分析与框架的组件结合起来，可用性可以从早期阶段就得到关注。 

1 引言

可用性不仅仅只出现在设计可见部分。可用性是系统的一部分，在设计系统的其余部分时必须考虑到它。
 
2 介绍

个人用户特征 和 执行的任务列表 是对可用性有很大影响的两个因素 

任务和用户分析 代表了在 需求阶段 获得 用户界面UI组件 的机会，这些组件需要以可用的方式处理任务的所有操作。
任务、用户 =》操作 =〉组件

在分析阶段，选择需要哪些用户界面组件来实现这些可用性模式。

A、任务分析
用户目标、执行操作、所需信息、所有可能结果（异常）

B、用户分析

C、可用性模式（有待进一步了解）
在识别任务特征和预期用户之后，对于任务流中的每个步骤，可用性组件都可以识别
可用性模型被定义为“一种技术机制，可以应用于软件系统架构的设计，以满足可用性特性所确定的需求”

3、将可用性与组件进行匹配
下一步是获取从任务分析中获得的每个任务，并评估 UI 元素列表。 我们必须根据每个人的特点，选择用户可以以可用的方式执行任务的所有操作的元素。

UI组件映射到可用性模型中。

4、研究实验
A、需求
    在需求阶段，应用任务分析和用户分析技术来识别系统中所需的 UI 组件。
    1）任务分析
        层次任务分析方法用于识别基本任务，并将其分解为子任务和动作。 
        从操作中可以识别可用于执行每个操作的可能 UI 组件的列表
        task =》steps =〉UI components（所有可能组件）
    2）用户分析
        根据用户特征选择相适应的组件（筛选合适组件）
B、分析
    可用性模式 映射  UI 组件列表
    task =》steps =〉UI components（筛选过的组件）=》可用性模式
C、设计
    可用性模式映射到框架预定义组件（待定）
    task =》steps =〉UI components（筛选过的组件）=》可用性模式 =〉框架预定义组件（待定）

5、结论总结
提供了一个基于任务和用户分析的实现可用性的简短指南，将可用性方面与实现框架中可用的组件和模式联系起来

这将允许我们识别三组 UI 组件: (1)任务所需的组件，(2)用户的理想组件，(3)要实现的指定组件

